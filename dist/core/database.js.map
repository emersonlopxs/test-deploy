{"version":3,"sources":["../../src/core/database.js"],"names":["ErrorWithCode","message","code","extra","snakeCaseToCamelCase","snakeCaseSentence","replace","underscoreLetter","toUpperCase","camelCaseToSnakeCase","camelCaseSentence","match","lowerCaseLetterBefore","uperCaseLetter","lowerCaseLetterAfter","toLowerCase","snakedCaseObjectKeysToCamelCase","snakedCaseObject","objectKeys","Object","keys","map","key","snakeCaseKey","camelCaseKey","camelCaseObject","forEach","buildSqlTextFromParams","sql","params","queue","paramValue","shift","paramValueEscaped","mysql","escape","openConnection","connectionOptions","database","DB_NAME","port","DB_PORT","host","DB_HOST","password","DB_PASSWORD","user","DB_USER","ssl","DB_CERT","ca","fs","readFileSync","path","join","__dirname","connection","createConnection","connect","closeConnection","Promise","resolve","reject","end","err","pipe","pipeHandler","res","conn","query","stream","rawSql","externalConnection","myConnection","IS_PRODUCTION_ENVIROMENT","console","log","Date","error","results","args","like","term","newTerm","trim","startsWith","endsWith","select","then","rows","row","first","length","update","changedRows","insert","insertId","remove","affectedRows","newSet","selectQuery","insertQuery","deleteQuery","newIds","parentId","oldOnes","oldRow","childId","newOnes","filter","newId","includes","removedOnes","oldId","all","removedId","beginTransaction","callback","ret"],"mappings":";;;;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AAJA;AAMA,SAASA,aAAT,CAAuBC,OAAvB,EAAgCC,IAAhC,EAAsCC,KAAtC,EAA6C;AAC3C,OAAKF,OAAL,GAAeA,OAAf;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACA,OAAKC,KAAL,GAAaA,KAAb;AACD;;AAED,MAAMC,oBAAoB,GAAGC,iBAAiB,IAC5CA,iBAAiB,CAACC,OAAlB,CAA0B,OAA1B,EAAmCC,gBAAgB,IAAIA,gBAAgB,CAAC,CAAD,CAAhB,CAAoBC,WAApB,EAAvD,CADF;;AAGA,MAAMC,oBAAoB,GAAGC,iBAAiB,IAC5CA,iBAAiB,CAACJ,OAAlB,CACE,wBADF,EAEE,CAACK,KAAD,EAAQC,qBAAR,EAA+BC,cAA/B,EAA+CC,oBAA/C,KACG,GAAEF,qBAAsB,IAAGC,cAAc,CAACE,WAAf,EAA6B,GAAED,oBAAqB,EAHpF,CADF;;AAOA,MAAME,+BAA+B,GAAGC,gBAAgB,IAAI;AAC1D,QAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYH,gBAAZ,EAA8BI,GAA9B,CAAkCC,GAAG,KAAK;AAC3DC,IAAAA,YAAY,EAAED,GAD6C;AAE3DE,IAAAA,YAAY,EAAEpB,oBAAoB,CAACkB,GAAD;AAFyB,GAAL,CAArC,CAAnB;AAKA,QAAMG,eAAe,GAAG,EAAxB;AAEAP,EAAAA,UAAU,CAACQ,OAAX,CAAmBN,IAAI,IAAI;AACzB,UAAM;AAAEG,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,QAAiCJ,IAAvC;AACAK,IAAAA,eAAe,CAACD,YAAD,CAAf,GAAgCP,gBAAgB,CAACM,YAAD,CAAhD;AACD,GAHD;AAKA,SAAOE,eAAP;AACD,CAdD;;AAgBA,MAAME,sBAAsB,GAAG,CAACC,GAAD,EAAMC,MAAM,GAAG,EAAf,KAAsB;AACnD,QAAMC,KAAK,GAAG,CAAC,GAAGD,MAAJ,CAAd;AACA,SAAOD,GAAG,CAACtB,OAAJ,CAAY,KAAZ,EAAmB,MAAM;AAC9B,UAAMyB,UAAU,GAAGD,KAAK,CAACE,KAAN,EAAnB;;AACA,UAAMC,iBAAiB,GAAGC,eAAMC,MAAN,CAAaJ,UAAb,CAA1B;;AACA,WAAOE,iBAAP;AACD,GAJM,CAAP;AAKD,CAPD;;AASA,eAAeG,cAAf,GAAgC;AAC9B,QAAMC,iBAAiB,GAAG;AACxBC,IAAAA,QAAQ,EAAEC,eADc;AAExBC,IAAAA,IAAI,EAAEC,eAFkB;AAGxBC,IAAAA,IAAI,EAAEC,eAHkB;AAIxBC,IAAAA,QAAQ,EAAEC,mBAJc;AAKxBC,IAAAA,IAAI,EAAEC,eALkB;AAMxBC,IAAAA,GAAG,EAAE;AANmB,GAA1B;;AASA,MAAI,CAACC,eAAL,EAAc;AACZ,WAAOZ,iBAAiB,CAACW,GAAzB;AACD,GAFD,MAEO;AACLX,IAAAA,iBAAiB,CAACW,GAAlB,GAAwB;AACtBE,MAAAA,EAAE,EAAEC,YAAGC,YAAH,CAAgBC,cAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiCN,eAAjC,CAAhB;AADkB,KAAxB;AAGD;;AAED,QAAMO,UAAU,GAAGtB,eAAMuB,gBAAN,CAAuBpB,iBAAvB,CAAnB;;AACAmB,EAAAA,UAAU,CAACE,OAAX;AAEA,SAAOF,UAAP;AACD;;AACD,MAAMG,eAAe,GAAGH,UAAU,IAChC,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BN,EAAAA,UAAU,CAACO,GAAX,CAAeC,GAAG,IAAI;AACpB,QAAIA,GAAJ,EAASF,MAAM,CAACE,GAAD,CAAN,CAAT,KACKH,OAAO;AACb,GAHD;AAID,CALD,CADF;;AAQO,MAAMI,IAAI,GAAG,OAAOrC,GAAP,EAAYC,MAAZ,EAAoBqC,WAApB,EAAiCC,GAAjC,KAAyC;AAC3D,QAAMC,IAAI,GAAG,MAAMhC,cAAc,EAAjC;AACA,QAAMgC,IAAI,CAACC,KAAL,CAAW5D,oBAAoB,CAACmB,GAAD,CAA/B,EAAsCC,MAAtC,EAA8CyC,MAA9C,GAAuDL,IAAvD,CAA4DC,WAA5D,EAAyED,IAAzE,CAA8EE,GAA9E,CAAN;AACA,QAAMR,eAAe,CAACS,IAAD,CAArB;AACD,CAJM;;;;AAMP,eAAeC,KAAf,CAAqBE,MAArB,EAA6B1C,MAA7B,EAAqC2C,kBAArC,EAAyD;AACvD,MAAIC,YAAJ;AAEA,QAAM7C,GAAG,GAAGnB,oBAAoB,CAAC8D,MAAD,CAAhC;;AAEA,MAAI,CAACG,gCAAL,EAA+B;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAIC,IAAJ,EAAZ,EAAwBlD,sBAAsB,CAACC,GAAD,EAAMC,MAAN,CAA9C;AACD;;AAED,MAAI,CAAC2C,kBAAL,EAAyBC,YAAY,GAAG,MAAMrC,cAAc,EAAnC,CAAzB,KACKqC,YAAY,GAAGD,kBAAf;;AAEL,MAAI;AACF;AACA,WAAO,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCW,MAAAA,YAAY,CAACJ,KAAb,CAAmBzC,GAAnB,EAAwBC,MAAxB,EAAgC,OAAOiD,KAAP,EAAcC,OAAd,KAA0B;AACxD,YAAID,KAAJ,EAAW;AACThB,UAAAA,MAAM,CAACgB,KAAD,CAAN;AACD,SAFD,MAEO;AACLjB,UAAAA,OAAO,CAACkB,OAAD,CAAP;AACD;AACF,OAND;AAOD,KARM,CAAP;AASD,GAXD,SAWU;AACR,QAAI,CAACP,kBAAL,EAAyB,MAAMb,eAAe,CAACc,YAAD,CAArB;AAC1B;AACF;AAED;AACA;AACA;;;AACO,MAAMtC,MAAM,GAAG,CAAC,GAAG6C,IAAJ,KAAa9C,eAAMC,MAAN,CAAa6C,IAAb,CAA5B;AAEP;AACA;AACA;AACA;AACA;;;;;AACO,MAAMC,IAAI,GAAGC,IAAI,IAAI;AAC1B,MAAIC,OAAO,GAAGD,IAAI,CAACE,IAAL,EAAd;AAEA,MAAI,CAACD,OAAO,CAACE,UAAR,CAAmB,GAAnB,CAAL,EAA8BF,OAAO,GAAI,IAAGA,OAAQ,EAAtB;AAC9B,MAAI,CAACA,OAAO,CAACG,QAAR,CAAiB,GAAjB,CAAL,EAA4BH,OAAO,GAAI,GAAEA,OAAQ,GAArB;AAE5B,SAAOjD,eAAMC,MAAN,CAAagD,OAAb,CAAP;AACD,CAPM;AASP;AACA;AACA;AACA;AACA;;;;;AACO,MAAMI,MAAM,GAAG,CAAC3D,GAAD,EAAMC,MAAN,KACpBwC,KAAK,CAACzC,GAAD,EAAMC,MAAN,CAAL,CAAmB2D,IAAnB,CAAwBC,IAAI,IAAIA,IAAI,CAACpE,GAAL,CAASqE,GAAG,IAAI1E,+BAA+B,CAAC0E,GAAD,CAA/C,CAAhC,CADK;AAGP;AACA;AACA;AACA;AACA;;;;;AACO,MAAMC,KAAK,GAAG,CAAC/D,GAAD,EAAMC,MAAN,KACnBwC,KAAK,CAACzC,GAAD,EAAMC,MAAN,CAAL,CAAmB2D,IAAnB,CAAwBC,IAAI,IAC1BA,IAAI,CAACG,MAAL,GACI5E,+BAA+B,CAACyE,IAAI,CAAC,CAAD,CAAL,CADnC,GAEI7B,OAAO,CAACE,MAAR,CACE,IAAI9D,aAAJ,CACE,2BADF,EAEE,4BAFF,EAGE2B,sBAAsB,CAACC,GAAD,EAAMC,MAAN,CAHxB,CADF,CAHN,CADK;AAaP;AACA;AACA;AACA;AACA;;;;;AACO,eAAegE,MAAf,CAAsBjE,GAAtB,EAA2BC,MAA3B,EAAmC;AACxC,SAAO,CAAC,MAAMwC,KAAK,CAACzC,GAAD,EAAMC,MAAN,CAAZ,EAA2BiE,WAAlC;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,eAAeC,MAAf,CAAsBnE,GAAtB,EAA2BC,MAA3B,EAAmC;AACxC,SAAO,CAAC,MAAMwC,KAAK,CAACzC,GAAD,EAAMC,MAAN,CAAZ,EAA2BmE,QAAlC;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,eAAeC,MAAf,CAAsBrE,GAAtB,EAA2BC,MAA3B,EAAmC;AACxC,SAAO,CAAC,MAAMwC,KAAK,CAACzC,GAAD,EAAMC,MAAN,CAAZ,EAA2BqE,YAAlC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,eAAeC,MAAf,CAAsBC,WAAtB,EAAmCC,WAAnC,EAAgDC,WAAhD,EAA6DC,MAAM,GAAG,EAAtE,EAA0EC,QAA1E,EAAoF;AACzF,QAAMC,OAAO,GAAG,CAAC,MAAMlB,MAAM,CAACa,WAAD,EAAc,CAACI,QAAD,CAAd,CAAb,EAAwCnF,GAAxC,CAA4CqF,MAAM,IAAIA,MAAM,CAACC,OAA7D,CAAhB;AACA,QAAMC,OAAO,GAAG,CAAC,GAAGL,MAAJ,EAAYM,MAAZ,CAAmBC,KAAK,IAAI,CAACL,OAAO,CAACM,QAAR,CAAiBD,KAAjB,CAA7B,CAAhB;AACA,QAAME,WAAW,GAAGP,OAAO,CAACI,MAAR,CAAeI,KAAK,IAAI,CAACV,MAAM,CAACQ,QAAP,CAAgBE,KAAhB,CAAzB,CAApB;AAEA,QAAMrD,OAAO,CAACsD,GAAR,CAAYN,OAAO,CAACvF,GAAR,CAAYyF,KAAK,IAAIf,MAAM,CAACM,WAAD,EAAc,CAACG,QAAD,EAAWM,KAAX,CAAd,CAA3B,CAAZ,CAAN;AACA,QAAMlD,OAAO,CAACsD,GAAR,CAAYF,WAAW,CAAC3F,GAAZ,CAAgB8F,SAAS,IAAIlB,MAAM,CAACK,WAAD,EAAc,CAACE,QAAD,EAAWW,SAAX,CAAd,CAAnC,CAAZ,CAAN;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,eAAeC,gBAAf,CAAgCC,QAAhC,EAA0C;AAC/C,QAAM7D,UAAU,GAAG,MAAMpB,cAAc,EAAvC;AAEA,QAAMiC,KAAK,CAAC,mBAAD,EAAsB,EAAtB,EAA0Bb,UAA1B,CAAX;;AACA,MAAI;AACF,UAAM8D,GAAG,GAAG,MAAMD,QAAQ,CAAC;AACzBhD,MAAAA,KAAK,EAAE,OAAOzC,GAAP,EAAYC,MAAZ,KACLwC,KAAK,CAACzC,GAAD,EAAMC,MAAN,EAAc2B,UAAd,CAAL,CAA+BgC,IAA/B,CAAoCC,IAAI,IAAIA,IAAI,CAACpE,GAAL,CAASqE,GAAG,IAAI1E,+BAA+B,CAAC0E,GAAD,CAA/C,CAA5C,CAFuB;AAGzBH,MAAAA,MAAM,EAAE,OAAO3D,GAAP,EAAYC,MAAZ,KACNwC,KAAK,CAACzC,GAAD,EAAMC,MAAN,EAAc2B,UAAd,CAAL,CAA+BgC,IAA/B,CAAoCC,IAAI,IAAIA,IAAI,CAACpE,GAAL,CAASqE,GAAG,IAAI1E,+BAA+B,CAAC0E,GAAD,CAA/C,CAA5C,CAJuB;AAKzBC,MAAAA,KAAK,EAAE,OAAO/D,GAAP,EAAYC,MAAZ,KACLwC,KAAK,CAACzC,GAAD,EAAMC,MAAN,EAAc2B,UAAd,CAAL,CACGgC,IADH,CACQC,IAAI,IAAIA,IAAI,CAACpE,GAAL,CAASqE,GAAG,IAAI1E,+BAA+B,CAAC0E,GAAD,CAA/C,CADhB,EAEGF,IAFH,CAEQC,IAAI,IACRA,IAAI,CAACG,MAAL,GAAcH,IAAI,CAAC,CAAD,CAAlB,GAAwB7B,OAAO,CAACE,MAAR,CAAe,IAAI9D,aAAJ,CAAkB,WAAlB,EAA+B,4BAA/B,CAAf,CAH5B,CANuB;AAWzB6F,MAAAA,MAAM,EAAE,CAACjE,GAAD,EAAMC,MAAN,KAAiBwC,KAAK,CAACzC,GAAD,EAAMC,MAAN,EAAc2B,UAAd,CAAL,CAA+BgC,IAA/B,CAAoC,CAAC;AAAEM,QAAAA;AAAF,OAAD,KAAqBA,WAAzD,CAXA;AAYzBC,MAAAA,MAAM,EAAE,CAACnE,GAAD,EAAMC,MAAN,KAAiBwC,KAAK,CAACzC,GAAD,EAAMC,MAAN,EAAc2B,UAAd,CAAL,CAA+BgC,IAA/B,CAAoC,CAAC;AAAEQ,QAAAA;AAAF,OAAD,KAAkBA,QAAtD,CAZA;AAazBC,MAAAA,MAAM,EAAE,CAACrE,GAAD,EAAMC,MAAN,KAAiBwC,KAAK,CAACzC,GAAD,EAAMC,MAAN,EAAc2B,UAAd,CAAL,CAA+BgC,IAA/B,CAAoC,CAAC;AAAEM,QAAAA;AAAF,OAAD,KAAqBA,WAAzD,CAbA;AAczBK,MAAAA,MAAM,EAAE,CAACC,WAAD,EAAcC,WAAd,EAA2BC,WAA3B,EAAwCC,MAAxC,EAAgDC,QAAhD,KACNL,MAAM,CAACC,WAAD,EAAcC,WAAd,EAA2BC,WAA3B,EAAwCC,MAAxC,EAAgDC,QAAhD;AAfiB,KAAD,CAA1B;AAkBA,UAAMnC,KAAK,CAAC,QAAD,EAAW,EAAX,EAAeb,UAAf,CAAX;AACA,WAAO8D,GAAP;AACD,GArBD,CAqBE,OAAOtD,GAAP,EAAY;AACZ,UAAMK,KAAK,CAAC,UAAD,EAAa,EAAb,EAAiBb,UAAjB,CAAX;AACA,UAAMQ,GAAN;AACD,GAxBD,SAwBU;AACR,UAAML,eAAe,CAACH,UAAD,CAArB;AACD;AACF","sourcesContent":["/* eslint-disable no-console */\nimport mysql from \"mysql\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { DB_NAME, DB_PORT, DB_HOST, DB_PASSWORD, DB_USER, DB_CERT, IS_PRODUCTION_ENVIROMENT } from \"./config\";\n\nfunction ErrorWithCode(message, code, extra) {\n  this.message = message;\n  this.code = code;\n  this.extra = extra;\n}\n\nconst snakeCaseToCamelCase = snakeCaseSentence =>\n  snakeCaseSentence.replace(/[_]./g, underscoreLetter => underscoreLetter[1].toUpperCase());\n\nconst camelCaseToSnakeCase = camelCaseSentence =>\n  camelCaseSentence.replace(\n    /([a-z])([A-Z])([a-z])/g,\n    (match, lowerCaseLetterBefore, uperCaseLetter, lowerCaseLetterAfter) =>\n      `${lowerCaseLetterBefore}_${uperCaseLetter.toLowerCase()}${lowerCaseLetterAfter}`\n  );\n\nconst snakedCaseObjectKeysToCamelCase = snakedCaseObject => {\n  const objectKeys = Object.keys(snakedCaseObject).map(key => ({\n    snakeCaseKey: key,\n    camelCaseKey: snakeCaseToCamelCase(key),\n  }));\n\n  const camelCaseObject = {};\n\n  objectKeys.forEach(keys => {\n    const { snakeCaseKey, camelCaseKey } = keys;\n    camelCaseObject[camelCaseKey] = snakedCaseObject[snakeCaseKey];\n  });\n\n  return camelCaseObject;\n};\n\nconst buildSqlTextFromParams = (sql, params = []) => {\n  const queue = [...params];\n  return sql.replace(/\\?/g, () => {\n    const paramValue = queue.shift();\n    const paramValueEscaped = mysql.escape(paramValue);\n    return paramValueEscaped;\n  });\n};\n\nasync function openConnection() {\n  const connectionOptions = {\n    database: DB_NAME,\n    port: DB_PORT,\n    host: DB_HOST,\n    password: DB_PASSWORD,\n    user: DB_USER,\n    ssl: {},\n  };\n\n  if (!DB_CERT) {\n    delete connectionOptions.ssl;\n  } else {\n    connectionOptions.ssl = {\n      ca: fs.readFileSync(path.join(__dirname, \"..\", \"..\", DB_CERT)),\n    };\n  }\n\n  const connection = mysql.createConnection(connectionOptions);\n  connection.connect();\n\n  return connection;\n}\nconst closeConnection = connection =>\n  new Promise((resolve, reject) => {\n    connection.end(err => {\n      if (err) reject(err);\n      else resolve();\n    });\n  });\n\nexport const pipe = async (sql, params, pipeHandler, res) => {\n  const conn = await openConnection();\n  await conn.query(camelCaseToSnakeCase(sql), params).stream().pipe(pipeHandler).pipe(res);\n  await closeConnection(conn);\n};\n\nasync function query(rawSql, params, externalConnection) {\n  let myConnection;\n\n  const sql = camelCaseToSnakeCase(rawSql);\n\n  if (!IS_PRODUCTION_ENVIROMENT) {\n    console.log(new Date(), buildSqlTextFromParams(sql, params));\n  }\n\n  if (!externalConnection) myConnection = await openConnection();\n  else myConnection = externalConnection;\n\n  try {\n    // return util.promisify(myConnection.query)(sql, params);\n    return new Promise((resolve, reject) => {\n      myConnection.query(sql, params, async (error, results) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(results);\n        }\n      });\n    });\n  } finally {\n    if (!externalConnection) await closeConnection(myConnection);\n  }\n}\n\n/**\n * Escape user input to prevent SQL injection\n */\nexport const escape = (...args) => mysql.escape(args);\n\n/**\n * Prepare a term to be searchable in like expressions\n *\n * @param {string} term\n */\nexport const like = term => {\n  let newTerm = term.trim();\n\n  if (!newTerm.startsWith(\"%\")) newTerm = `%${newTerm}`;\n  if (!newTerm.endsWith(\"%\")) newTerm = `${newTerm}%`;\n\n  return mysql.escape(newTerm);\n};\n\n/**\n * Perform the SQL query passed and return all rows *\n * @param {string} sql\n * @param {Array} params\n */\nexport const select = (sql, params) =>\n  query(sql, params).then(rows => rows.map(row => snakedCaseObjectKeysToCamelCase(row)));\n\n/**\n * Perform the SQL query passed and return the first row\n * @param {string} sql\n * @param {Array} params\n */\nexport const first = (sql, params) =>\n  query(sql, params).then(rows =>\n    rows.length\n      ? snakedCaseObjectKeysToCamelCase(rows[0])\n      : Promise.reject(\n          new ErrorWithCode(\n            \"Database Record Not Found\",\n            \"ERR_DATABASE_GET_NOT_FOUND\",\n            buildSqlTextFromParams(sql, params)\n          )\n        )\n  );\n\n/**\n * Perform the SQL query passed and changed rows\n * @param {string} sql\n * @param {Array} params\n */\nexport async function update(sql, params) {\n  return (await query(sql, params)).changedRows;\n}\n\n/**\n * Perform the SQL query passed and return the inserted id\n * @param {string} sql\n * @param {Array} params\n */\nexport async function insert(sql, params) {\n  return (await query(sql, params)).insertId;\n}\n\n/**\n * Perform the SQL query passed and return changed rows\n * @param {string} sql\n * @param {Array} params\n */\nexport async function remove(sql, params) {\n  return (await query(sql, params)).affectedRows;\n}\n\n/**\n * Perform deletions, inserts necessary to set a new set of n:n relations\n * @param {string} selectQuery SQL Select query that return actual IDs, params: [parentId]\n * @param {string} insertQuery SQL Insert query to insert a new ID, params: [parentId, newId]\n * @param {string} deleteQuery SQL Delete query to remove and ID, params: [parentId, removedId]\n * @param {number[]} newIds Array of numbers with new IDs\n * @param {number} parentId The parent ID\n */\nexport async function newSet(selectQuery, insertQuery, deleteQuery, newIds = [], parentId) {\n  const oldOnes = (await select(selectQuery, [parentId])).map(oldRow => oldRow.childId);\n  const newOnes = [...newIds].filter(newId => !oldOnes.includes(newId));\n  const removedOnes = oldOnes.filter(oldId => !newIds.includes(oldId));\n\n  await Promise.all(newOnes.map(newId => insert(insertQuery, [parentId, newId])));\n  await Promise.all(removedOnes.map(removedId => remove(deleteQuery, [parentId, removedId])));\n}\n\n/**\n * Use that when you need to perform a series of queries that must be inside a transaction\n * The callback will receive an object that have the methods:\n *  - select\n *  - first\n *  - update\n *  - insert\n *  - remove\n *  - newSet\n * @param {Function} callback\n */\nexport async function beginTransaction(callback) {\n  const connection = await openConnection();\n\n  await query(\"start transaction\", [], connection);\n  try {\n    const ret = await callback({\n      query: async (sql, params) =>\n        query(sql, params, connection).then(rows => rows.map(row => snakedCaseObjectKeysToCamelCase(row))),\n      select: async (sql, params) =>\n        query(sql, params, connection).then(rows => rows.map(row => snakedCaseObjectKeysToCamelCase(row))),\n      first: async (sql, params) =>\n        query(sql, params, connection)\n          .then(rows => rows.map(row => snakedCaseObjectKeysToCamelCase(row)))\n          .then(rows =>\n            rows.length ? rows[0] : Promise.reject(new ErrorWithCode(\"Not Found\", \"ERR_DATABASE_GET_NOT_FOUND\"))\n          ),\n      update: (sql, params) => query(sql, params, connection).then(({ changedRows }) => changedRows),\n      insert: (sql, params) => query(sql, params, connection).then(({ insertId }) => insertId),\n      remove: (sql, params) => query(sql, params, connection).then(({ changedRows }) => changedRows),\n      newSet: (selectQuery, insertQuery, deleteQuery, newIds, parentId) =>\n        newSet(selectQuery, insertQuery, deleteQuery, newIds, parentId),\n    });\n\n    await query(\"commit\", [], connection);\n    return ret;\n  } catch (err) {\n    await query(\"rollback\", [], connection);\n    throw err;\n  } finally {\n    await closeConnection(connection);\n  }\n}\n"],"file":"database.js"}