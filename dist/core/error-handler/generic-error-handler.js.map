{"version":3,"sources":["../../../src/core/error-handler/generic-error-handler.js"],"names":["genericErrorHandler","error","req","res","next","printableError","ExposableError","console","status","statusCode","json","message","project","package","enviroment","process","env","NODE_ENV","stack","JSON","stringify","then","errorId"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;AACA;;AANA;;AACA;;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,mBAAT,CAA6BC,KAA7B,EAAoCC,GAApC,EAAyCC,GAAzC,EAA8CC,IAA9C,EAAoD;AACzD,QAAMC,cAAc,GAAG,oCAAeJ,KAAf,CAAvB;;AAEA,MAAIA,KAAK,YAAYK,sBAArB,EAAqC;AACnCC,IAAAA,OAAO,CAACN,KAAR,CAAc,uCAAd,EAAuDI,cAAvD;AACAF,IAAAA,GAAG,CAACK,MAAJ,CAAWP,KAAK,CAACQ,UAAN,IAAoB,GAA/B,EAAoCC,IAApC,CAAyCT,KAAK,CAACU,OAA/C;AACD,GAHD,MAGO;AACLJ,IAAAA,OAAO,CAACN,KAAR,CAAc,4BAAd,EAA4CI,cAA5C;AACA;AAEA,6BAAa;AACXO,MAAAA,OAAO,EAAE,iBADE;AAEXC,MAAAA,OAAO,EAAE,SAFE;AAGXC,MAAAA,UAAU,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAHb;AAIXN,MAAAA,OAAO,EAAEV,KAAK,CAACU,OAJJ;AAKXO,MAAAA,KAAK,EAAEjB,KAAK,CAACiB,KALF;AAMXjB,MAAAA,KAAK,EAAEkB,IAAI,CAACC,SAAL,CAAef,cAAf,EAA+B,IAA/B,EAAqC,CAArC;AANI,KAAb,EAOGgB,IAPH,CAOQC,OAAO,IAAI;AACjBpB,MAAAA,GAAG,CAACD,KAAJ,GAAYI,cAAZ;AACAH,MAAAA,GAAG,CAACoB,OAAJ,GAAcA,OAAd;AACAnB,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AACnBC,QAAAA,OAAO,EAAG,wEAAuEW,OAAQ,EADtE;AAEnBA,QAAAA;AAFmB,OAArB;AAID,KAdD;AAeD;AACF","sourcesContent":["/* eslint-disable no-debugger */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-console */\nimport { serializeError } from \"serialize-error\";\nimport { ExposableError } from \"~/errors\";\nimport { insertErrors } from \"~/handlers/utils\";\nimport { IS_PRODUCTION_ENVIROMENT } from \"../config\";\n\n/**\n * Generic error handler\n *  - Check if the error is an ExplosableError\n *    * Yes: send the error message to the client\n *    * No: console.log the error and send an 500 status code to the client\n *\n * @param {Object} error The error object\n * @param {Object} req The express.js request object\n * @param {Object} res The express.js response object\n * @param {Function} next The express.js next callback\n */\nexport function genericErrorHandler(error, req, res, next) {\n  const printableError = serializeError(error);\n\n  if (error instanceof ExposableError) {\n    console.error(\"genericErrorHandler(ExposableError): \", printableError);\n    res.status(error.statusCode || 400).json(error.message);\n  } else {\n    console.error(\"genericErrorHandler(500): \", printableError);\n    debugger;\n\n    insertErrors({\n      project: \"gerando-falcoes\",\n      package: \"backend\",\n      enviroment: process.env.NODE_ENV,\n      message: error.message,\n      stack: error.stack,\n      error: JSON.stringify(printableError, null, 2),\n    }).then(errorId => {\n      req.error = printableError;\n      req.errorId = errorId;\n      res.status(500).json({\n        message: `Internal sever error, contact support and please inform the errorId: ${errorId}`,\n        errorId,\n      });\n    });\n  }\n}\n"],"file":"generic-error-handler.js"}