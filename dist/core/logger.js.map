{"version":3,"sources":["../../src/core/logger.js"],"names":["logger","storeHandler","req","res","next","path","startsWith","oldWrite","write","oldEnd","end","chunks","chunk","push","apply","arguments","resbody","join","ip","headers","enviroment","process","env","NODE_ENV","envvars","protocol","method","route","reqheaders","params","reqparams","body","reqbody","query","reqquery","error","errorId","authorization","statusCode","statusMessage","resheaders","getHeaders","logData","simpleLogData","LOG_REQUESTS_RESPONSES_TO_CONSOLE","console","log"],"mappings":"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","sourcesContent":["/* eslint-disable prefer-rest-params */\n/* eslint-disable func-names */\n/* eslint-disable no-console */\n\nimport { LOG_REQUESTS_RESPONSES_TO_CONSOLE } from \"./config\";\n\n/**\n * Log requests/responses to database\n *\n * @param {Object} req The express.js request object\n * @param {Object} res The express.js response object\n * @param {Function} next The express.js next callback\n */\nexport function logger(storeHandler) {\n  return function (req, res, next) {\n    if (req.path.startsWith(\"/api-docs/\")) return next();\n\n    const oldWrite = res.write;\n    const oldEnd = res.end;\n\n    const chunks = [];\n\n    res.write = function (chunk) {\n      chunks.push(chunk);\n\n      return oldWrite.apply(res, arguments);\n    };\n\n    res.end = function (chunk) {\n      if (chunk) chunks.push(chunk);\n\n      const resbody = chunks.join(\"\");\n\n      const ip = req.headers[\"client-ip\"];\n      const enviroment = process.env.NODE_ENV;\n      const envvars = {};\n\n      const {\n        protocol,\n        method,\n        path,\n        route,\n        headers: reqheaders,\n        params: reqparams,\n        body: reqbody,\n        query: reqquery,\n        error,\n        errorId,\n      } = req;\n\n      const { authorization } = reqheaders;\n\n      const { statusCode, statusMessage } = res;\n\n      const resheaders = res.getHeaders();\n\n      const logData = {\n        enviroment,\n        ip,\n        protocol,\n        method,\n        path,\n        route,\n        authorization,\n        reqheaders,\n        reqparams,\n        reqbody,\n        reqquery,\n        statusCode,\n        statusMessage,\n        resheaders,\n        resbody,\n        envvars,\n        error,\n        errorId,\n      };\n\n      const simpleLogData = {\n        ip,\n        protocol,\n        method,\n        path,\n        route,\n        authorization,\n        reqparams,\n        reqbody,\n        reqquery,\n        statusCode,\n        statusMessage,\n        resbody,\n        errorId,\n      };\n\n      if (LOG_REQUESTS_RESPONSES_TO_CONSOLE) console.log(simpleLogData);\n      if (storeHandler) storeHandler(logData, req, res);\n\n      oldEnd.apply(res, arguments);\n    };\n\n    return next();\n  };\n}\n"],"file":"logger.js"}