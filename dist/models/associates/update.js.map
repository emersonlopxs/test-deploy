{"version":3,"sources":["../../../src/models/associates/update.js"],"names":["fsWriteFileAsync","util","promisify","fs","writeFile","fsUnlinkAsync","unlink","fsRealPathAsync","realpath","update","id","name","color","description","button","link","params","trans","imageBuffer","buffer","mimetype","first","then","imageLink","split","blobServiceClient","BlobServiceClient","fromConnectionString","AZURE_STORAGE_CONNECTION_STRING","containerClient","getContainerClient","blockBlobClient","getBlockBlobClient","delete","tempDir","os","tmpdir","tempfile","path","join","uuid","v4","blobClient","getBlobClient","uploadFile"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,MAAMA,gBAAgB,GAAGC,cAAKC,SAAL,CAAeC,YAAGC,SAAlB,CAAzB;;AACA,MAAMC,aAAa,GAAGJ,cAAKC,SAAL,CAAeC,YAAGG,MAAlB,CAAtB;;AACA,MAAMC,eAAe,GAAGN,cAAKC,SAAL,CAAeC,YAAGK,QAAlB,CAAxB;;AAEO,MAAMC,MAAM,GAAG,OAAO;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,IAAN;AAAYC,EAAAA,KAAZ;AAAmBC,EAAAA,WAAnB;AAAgCC,EAAAA,MAAhC;AAAwCC,EAAAA,IAAxC;AAA8C,KAAGC;AAAjD,CAAP,KACpB,gCAAiB,MAAMC,KAAN,IAAe;AAC9B,MAAIC,WAAJ;AAEA,MAAIF,MAAM,CAAC,GAAD,CAAV,EAAiBE,WAAW,GAAGF,MAAM,CAAC,GAAD,CAAN,CAAYG,MAA1B;AAEjB,QAAMF,KAAK,CAACR,MAAN,CACH;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAVU,EAWJ,CAACE,IAAD,EAAOC,KAAP,EAAcC,WAAd,EAA2BC,MAA3B,EAAmCC,IAAnC,EAAyCL,EAAzC,CAXI,CAAN;;AAcA,MAAIQ,WAAJ,EAAiB;AACf,QAAI,GAAGE,QAAH,IAAe,MAAMH,KAAK,CAC3BI,KADsB,CAEpB;AACX;AACA;AACA;AACA;AACA,WAP+B,EAQrB,CAACX,EAAD,CARqB,EAUtBY,IAVsB,CAUjB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAmBA,SAAS,CAACC,KAAV,CAAiB,GAAEd,EAAG,EAAtB,CAVF,CAAzB;;AAYA,UAAMe,iBAAiB,GAAGC,+BAAkBC,oBAAlB,CAAuCC,uCAAvC,CAA1B;;AACA,UAAMC,eAAe,GAAGJ,iBAAiB,CAACK,kBAAlB,CAAqC,mBAArC,CAAxB;AACA,QAAIC,eAAe,GAAGF,eAAe,CAACG,kBAAhB,CAAoC,GAAEtB,EAAG,GAAEU,QAAS,EAApD,CAAtB;AACA,UAAMW,eAAe,CAACE,MAAhB,EAAN;AAEA,OAAGb,QAAH,IAAeJ,MAAM,CAAC,GAAD,CAAN,CAAYI,QAAZ,CAAqBI,KAArB,CAA2B,GAA3B,CAAf;AACA,UAAMD,SAAS,GAAI,gEAA+Db,EAAG,IAAGU,QAAS,EAAjG;AAEA,UAAMH,KAAK,CAACR,MAAN,CACH;AACT;AACA;AACA;AACA;AACA,SANY,EAOJ,CAACc,SAAD,EAAYb,EAAZ,CAPI,CAAN;AAUA,UAAMwB,OAAO,GAAG,MAAM3B,eAAe,CAAC4B,YAAGC,MAAH,EAAD,CAArC;;AACA,UAAMC,QAAQ,GAAGC,cAAKC,IAAL,CAAUL,OAAV,EAAmBM,cAAKC,EAAL,EAAnB,CAAjB;;AACA,UAAMzC,gBAAgB,CAACqC,QAAD,EAAWnB,WAAX,CAAtB;AACA,UAAMwB,UAAU,GAAGb,eAAe,CAACc,aAAhB,CAA+B,GAAEjC,EAAG,IAAGU,QAAS,EAAhD,CAAnB;AACAW,IAAAA,eAAe,GAAGW,UAAU,CAACV,kBAAX,EAAlB;AACA,UAAMD,eAAe,CAACa,UAAhB,CAA2BP,QAA3B,CAAN;AACA,UAAMhC,aAAa,CAACgC,QAAD,CAAnB;AACD;AACF,CA1DD,CADK","sourcesContent":["import fs from \"fs\";\nimport util from \"util\";\nimport uuid from \"uuid\";\nimport os from \"os\";\nimport path from \"path\";\nimport { BlobServiceClient } from \"@azure/storage-blob\";\nimport { AZURE_STORAGE_CONNECTION_STRING } from \"~/core/config\";\nimport { beginTransaction } from \"~/core/database\";\n\nconst fsWriteFileAsync = util.promisify(fs.writeFile);\nconst fsUnlinkAsync = util.promisify(fs.unlink);\nconst fsRealPathAsync = util.promisify(fs.realpath);\n\nexport const update = async ({ id, name, color, description, button, link, ...params }) =>\n  beginTransaction(async trans => {\n    let imageBuffer;\n\n    if (params[\"0\"]) imageBuffer = params[\"0\"].buffer;\n\n    await trans.update(\n      `\n      update associates set\n        name = coalesce(?, name),\n        color = coalesce(?, color),\n        description = coalesce(?, description),\n        button = coalesce(?, button),\n        link = coalesce(?, link),\n        modified_at = now()\n      where id = ?\n      `,\n      [name, color, description, button, link, id]\n    );\n\n    if (imageBuffer) {\n      let [, mimetype] = await trans\n        .first(\n          `\n          select\n            imageLink\n          from associates\n          where id = ?\n          `,\n          [id]\n        )\n        .then(({ imageLink }) => imageLink.split(`${id}`));\n\n      const blobServiceClient = BlobServiceClient.fromConnectionString(AZURE_STORAGE_CONNECTION_STRING);\n      const containerClient = blobServiceClient.getContainerClient(\"associates-images\");\n      let blockBlobClient = containerClient.getBlockBlobClient(`${id}${mimetype}`);\n      await blockBlobClient.delete();\n\n      [, mimetype] = params[\"0\"].mimetype.split(\"/\");\n      const imageLink = `https://gfacolesblob.blob.core.windows.net/associates-images/${id}.${mimetype}`;\n\n      await trans.update(\n        `\n        update associates\n          set imageLink = ?,\n          modified_at = now()\n        where id = ?\n        `,\n        [imageLink, id]\n      );\n\n      const tempDir = await fsRealPathAsync(os.tmpdir());\n      const tempfile = path.join(tempDir, uuid.v4());\n      await fsWriteFileAsync(tempfile, imageBuffer);\n      const blobClient = containerClient.getBlobClient(`${id}.${mimetype}`);\n      blockBlobClient = blobClient.getBlockBlobClient();\n      await blockBlobClient.uploadFile(tempfile);\n      await fsUnlinkAsync(tempfile);\n    }\n  });\n"],"file":"update.js"}