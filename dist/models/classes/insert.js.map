{"version":3,"sources":["../../../src/models/classes/insert.js"],"names":["insert","title","contents","subjectIds","classes","gradeId","tagsId","userId","trans","classId","map","subjectId","Promise","all","update","content","toString","description","thumbnail","type","url","isMain","childClassId","tagId"],"mappings":";;;;;;;AAAA;;AAEO,MAAMA,MAAM,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA,UAAnB;AAA+BC,EAAAA,OAA/B;AAAwCC,EAAAA,OAAxC;AAAiDC,EAAAA;AAAjD,CAAD,EAA4DC,MAA5D,KACpB,gCAAiB,MAAMC,KAAN,IAAe;AAC9B,QAAMC,OAAO,GAAG,MAAMD,KAAK,CAACR,MAAN,CACnB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAhB0B,EAiBpB,CAACO,MAAD,EAASF,OAAT,EAAkBJ,KAAlB,CAjBoB,CAAtB;AAoBAE,EAAAA,UAAU,CAACO,GAAX,CAAe,OAAMC,SAAN,KACbC,OAAO,CAACC,GAAR,CACEL,KAAK,CAACR,MAAN,CACG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAdQ,EAeE,CAACS,OAAD,EAAUE,SAAV,CAfF,CADF,EAkBEH,KAAK,CAACM,MAAN,CACG;AACX;AACA,WAHQ,EAIE,CAACH,SAAD,CAJF,CAlBF,CADF;;AA4BA,MAAIT,QAAJ,EAAc;AACZA,IAAAA,QAAQ,CAACQ,GAAT,CAAa,OAAMK,OAAN,KACXP,KAAK,CAACR,MAAN,CACG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAtBQ,EAuBE,CAACS,OAAO,CAACO,QAAR,EAAD,EAAqBD,OAAO,CAACE,WAA7B,EAA0CF,OAAO,CAACG,SAAlD,EAA6DH,OAAO,CAACI,IAArE,EAA2EJ,OAAO,CAACK,GAAnF,EAAwFL,OAAO,CAACM,MAAhG,CAvBF,CADF;AA2BD;;AAED,MAAIjB,OAAJ,EAAa;AACXA,IAAAA,OAAO,CAACM,GAAR,CAAY,OAAMY,YAAN,KACVd,KAAK,CAACR,MAAN,CACG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAdQ,EAeE,CAACS,OAAD,EAAUa,YAAV,CAfF,CADF;AAmBD;;AAED,MAAIhB,MAAJ,EAAY;AACVA,IAAAA,MAAM,CAACI,GAAP,CAAW,OAAMa,KAAN,KACTf,KAAK,CAACR,MAAN,CACG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAdQ,EAeE,CAACS,OAAD,EAAUc,KAAV,CAfF,CADF;AAmBD;;AAED,SAAOd,OAAP;AACD,CA5HD,CADK","sourcesContent":["import { beginTransaction } from \"~/core/database\";\n\nexport const insert = ({ title, contents, subjectIds, classes, gradeId, tagsId }, userId) =>\n  beginTransaction(async trans => {\n    const classId = await trans.insert(\n      `\n      insert into classes(\n        userId\n        , gradeId\n        , title\n        , createdAt\n        , modifiedAt\n      )\n      values(\n        ?\n        , ?\n        , ?\n        , now()\n        , now()\n      )\n      `,\n      [userId, gradeId, title]\n    );\n\n    subjectIds.map(async subjectId =>\n      Promise.all(\n        trans.insert(\n          `\n          insert into classesSubjects(\n            classId\n            , subjectId\n            , createdAt\n            , modifiedAt\n          )\n          values(\n            ?\n            , ?\n            , now()\n            , now()\n          )\n        `,\n          [classId, subjectId]\n        ),\n        trans.update(\n          `\n          update subjects set modifiedAt = now() where id = ?\n          `,\n          [subjectId]\n        )\n      )\n    );\n\n    if (contents) {\n      contents.map(async content =>\n        trans.insert(\n          `\n          insert into classesContents(\n            classId\n            , description\n            , thumbnail\n            , type\n            , url\n            , isMain\n            , createdAt\n            , modifiedAt\n          )\n          values(\n            ?\n            , ?\n            , ?\n            , ?\n            , ?\n            , ?\n            , now()\n            , now()\n          )\n          `,\n          [classId.toString(), content.description, content.thumbnail, content.type, content.url, content.isMain]\n        )\n      );\n    }\n\n    if (classes) {\n      classes.map(async childClassId =>\n        trans.insert(\n          `\n            insert into classesClasses(\n              parentClassId\n              , childClassId\n              , createdAt\n              , modifiedAt\n            )\n            values(\n              ?\n              , ?\n              , now()\n              , now()\n            )\n          `,\n          [classId, childClassId]\n        )\n      );\n    }\n\n    if (tagsId) {\n      tagsId.map(async tagId =>\n        trans.insert(\n          `\n            insert into classesTags(\n              classId\n              , tagId\n              , createdAt\n              , modifiedAt\n            )\n            values(\n              ?\n              , ?\n              , now()\n              , now()\n            )\n          `,\n          [classId, tagId]\n        )\n      );\n    }\n\n    return classId;\n  });\n"],"file":"insert.js"}