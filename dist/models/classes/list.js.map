{"version":3,"sources":["../../../src/models/classes/list.js"],"names":["list","subjectIds","classIds","keyword","limit","offset","rows","join","count","total","filters"],"mappings":";;;;;;;AAAA;;AAEO,MAAMA,IAAI,GAAG,OAAO;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,QAAd;AAAwBC,EAAAA,OAAxB;AAAiCC,EAAAA,KAAK,GAAG,EAAzC;AAA6CC,EAAAA,MAAM,GAAG;AAAtD,CAAP,KAAqE;AACvF,QAAMC,IAAI,GAAG,MAAM,sBAChB;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQL,UAAU,GAAI,wBAAuBA,UAAU,CAACM,IAAX,EAAkB,GAA7C,GAAkD,EAAG;AACvE,QAAQL,QAAQ,GAAI,gBAAeA,QAAQ,CAACK,IAAT,EAAgB,GAAnC,GAAwC,EAAG;AAC3D,QAAQJ,OAAO,GAAI,oBAAmB,oBAAKA,OAAL,CAAc,EAArC,GAAyC,EAAG;AAC3D;AACA;AACA;AACA,KArBqB,EAsBjB,CAACC,KAAD,EAAQC,MAAR,CAtBiB,CAAnB;AAyBA,QAAM;AAAEG,IAAAA,KAAK,EAAEC;AAAT,MAAmB,MAAM,qBAC5B;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQR,UAAU,GAAI,wBAAuBA,UAAU,CAACM,IAAX,EAAkB,GAA7C,GAAkD,EAAG;AACvE,QAAQL,QAAQ,GAAI,gBAAeA,QAAQ,CAACK,IAAT,EAAgB,GAAnC,GAAwC,EAAG;AAC3D,QAAQJ,OAAO,GAAI,oBAAmB,oBAAKA,OAAL,CAAc,EAArC,GAAyC,EAAG;AAC3D,KAbiC,CAA/B;AAgBA,SAAO;AAAEC,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBK,IAAAA,OAAO,EAAE;AAAET,MAAAA,UAAF;AAAcE,MAAAA,OAAd;AAAuBD,MAAAA;AAAvB,KAA1B;AAA6DO,IAAAA,KAA7D;AAAoEH,IAAAA;AAApE,GAAP;AACD,CA3CM","sourcesContent":["import { first, select, like } from \"~/core/database\";\n\nexport const list = async ({ subjectIds, classIds, keyword, limit = 10, offset = 0 }) => {\n  const rows = await select(\n    `\n    select\n      C.id,\n      C.title,\n      CT.name as classType,\n      CC.description,\n      CC.thumbnail,\n      CC.url\n    from classesSubjects as CS\n    join classes as C on C.id = CS.classId\n    join subjects as S on S.id = CS.subjectId\n    join classTypes as CT on CT.id = S.classTypeId\n    join classesContents as CC on CC.classId = C.id\n    where 1 = 1\n      ${subjectIds ? `AND CS.subjectId in (${subjectIds.join()})` : \"\"}\n      ${classIds ? `AND C.id in (${classIds.join()})` : \"\"}\n      ${keyword ? `AND C.title like ${like(keyword)}` : \"\"}\n    group by C.id\n    order by C.modified_at desc\n    limit ? offset ?\n    `,\n    [limit, offset]\n  );\n\n  const { count: total } = await first(\n    `\n    select\n      count(distinct C.id) as count\n    from classesSubjects as CS\n    join classes as C on C.id = CS.classId\n    join subjects as S on S.id = CS.subjectId\n    join classTypes as CT on CT.id = S.classTypeId\n    join classesContents as CC on CC.classId = C.id\n    where 1 = 1\n      ${subjectIds ? `AND CS.subjectId in (${subjectIds.join()})` : \"\"}\n      ${classIds ? `AND C.id in (${classIds.join()})` : \"\"}\n      ${keyword ? `AND C.title like ${like(keyword)}` : \"\"}\n    `\n  );\n\n  return { limit, offset, filters: { subjectIds, keyword, classIds }, total, rows };\n};\n"],"file":"list.js"}