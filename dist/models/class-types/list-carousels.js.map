{"version":3,"sources":["../../../src/models/class-types/list-carousels.js"],"names":["createIdList","values","listId","map","row","id","teacher","cardNumbers","loggedUserId","workshops","subjects","length","subjectsIds","join","otherThemes","otherThemesIds","student","workshopsIds"],"mappings":"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","sourcesContent":["/* eslint-disable no-extra-parens */\nimport { select } from \"~/core/database\";\n\nconst createIdList = values => {\n  let listId;\n  if (values) {\n    listId = values.map(row => row.id);\n  }\n\n  return listId;\n};\n\nexport const teacher = async ({ cardNumbers = 6 }, loggedUserId) => {\n  const workshops = await select(\n    `\n    select\n      S.id,\n      S.name,\n      S.color,\n      S.description,\n      (select count(*) as count\n        from classesSubjects as CS\n        where CS.subjectId = S.id) as classQuantity\n    from subjects as S\n    where\n      S.classTypeId = 2\n      AND (select count(*) as count\n      from classesSubjects as CS\n      where CS.subjectId = S.id) > 0\n    order by S.modified_at desc\n    limit ${cardNumbers}\n    `\n  );\n\n  let subjects = await select(\n    `\n    select\n      S.id,\n      S.name,\n      S.color,\n      S.description,\n      (select count(*) as count\n        from classesSubjects as CS\n        where CS.subjectId = S.id) as classQuantity\n    from subjects as S\n    join teachersSubjects as TS on TS.subjectId = S.id\n    join teachers as T on T.id = TS.teacherId\n    where\n      T.userId = ?\n      AND (select count(*) as count\n      from classesSubjects as CS\n      where CS.subjectId = S.id) > 0\n    order by S.modified_at desc\n    limit ${cardNumbers}\n    `,\n    [loggedUserId]\n  );\n\n  if (subjects.length < cardNumbers) {\n    const subjectsIds = createIdList(subjects);\n\n    subjects = [\n      ...subjects,\n      ...(await select(\n        `\n        select\n          S.id,\n          S.name,\n          S.color,\n          S.description,\n          (select count(*) as count\n          from classesSubjects as CS\n          where CS.subjectId = S.id) as classQuantity\n        from subjects as S\n        where\n          classTypeId = 1 ${subjectsIds.length > 0 ? `AND S.id not in (${subjectsIds.join()})` : \"\"}\n          AND (select count(*) as count\n          from classesSubjects as CS\n          where CS.subjectId = S.id) > 0\n        order by S.modified_at desc\n        limit ${cardNumbers - subjects.length}\n        `,\n        [loggedUserId]\n      )),\n    ];\n  }\n\n  let otherThemes = await select(\n    `\n    select\n      CT.id,\n      CT.name,\n      CT.description,\n      (select count(*) as count\n        from subjects as S\n        join classesSubjects as CS on CS.subjectId = S.id\n        where classTypeId = CT.id) as classQuantity\n    from userClasses as UC\n    join classTypes as CT on CT.id = UC.classTypeId\n    where\n      userId = ?\n      AND classTypeId > 2\n      AND (select count(*) as count\n      from subjects as S\n      join classesSubjects as CS on CS.subjectId = S.id\n      where classTypeId = CT.id) > 0\n    order by CT.modified_at desc\n    `,\n    [loggedUserId]\n  );\n\n  if (otherThemes.length < cardNumbers) {\n    const otherThemesIds = createIdList(otherThemes);\n\n    otherThemes = [\n      ...otherThemes,\n      ...(await select(\n        `\n        select\n          CT.id,\n          CT.name,\n          CT.description,\n          (select count(*) as count\n            from subjects as S\n            join classesSubjects as CS on CS.subjectId = S.id\n            where classTypeId = CT.id) as classQuantity\n        from userClasses as UC\n        join classTypes as CT on CT.id = UC.classTypeId\n        where\n          classTypeId > 2 ${otherThemesIds.length > 0 ? `AND CT.id not in (${otherThemesIds.join()})` : \"\"}\n          AND (select count(*) as count\n          from subjects as S\n          join classesSubjects as CS on CS.subjectId = S.id\n          where classTypeId = CT.id) > 0\n        group BY CT.id\n        order by CT.modified_at desc\n        `,\n        [loggedUserId]\n      )),\n    ];\n  }\n\n  return { workshops, subjects, otherThemes };\n};\n\nexport const student = async ({ cardNumbers = 6 }, loggedUserId) => {\n  let workshops = await select(\n    `\n    select\n      S.id,\n      S.name,\n      S.color,\n      S.description,\n      (select count(*) as count\n        from classesSubjects as CS\n        where CS.subjectId = S.id) as classQuantity\n    from subjects as S\n    join userClasses as UC on UC.subjectId = S.id\n    where\n      UC.userId = ?\n      AND S.classTypeId = 2\n      AND (select count(*) as count\n        from classesSubjects as CS\n        where CS.subjectId = S.id) > 0\n    group by S.id\n    order by S.modified_at desc\n    `,\n    [loggedUserId]\n  );\n\n  let workshopsIds;\n  if (workshops.length < cardNumbers) {\n    workshopsIds = createIdList(workshops);\n    workshops = [\n      ...workshops,\n      ...(await select(\n        `\n        select\n          S.id,\n          S.name,\n          S.color,\n          S.description,\n          (select count(*) as count\n            from classesSubjects as CS\n            where CS.subjectId = S.id) as classQuantity\n        from subjects as S\n        join userClasses as UC on UC.subjectId = S.id\n        join students as ST on ST.userId = ?\n        where\n          S.siteId = ST.siteId ${workshopsIds.length > 0 ? `AND S.id not in (${workshopsIds.join()})` : \"\"}\n          AND (select count(*) as count\n            from classesSubjects as CS\n            where CS.subjectId = S.id) > 0\n        group by id\n        order by S.modified_at desc\n        limit ${cardNumbers - workshops.length}\n        `,\n        [loggedUserId]\n      )),\n    ];\n  }\n\n  if (workshops.length < cardNumbers) {\n    workshopsIds = createIdList(workshops);\n    workshops = [\n      ...workshops,\n      ...(await select(\n        `\n        select\n          S.id,\n          S.name,\n          S.color,\n          S.description,\n          (select count(*) as count\n            from classesSubjects as CS\n            where CS.subjectId = S.id) as classQuantity\n        from subjects as S\n        join userClasses as UC on UC.subjectId = S.id\n        join students as ST on ST.userId = ?\n        where\n          S.siteId = ST.siteId ${workshopsIds.length > 0 ? `AND S.id not in (${workshopsIds.join()})` : \"\"}\n          AND (select count(*) as count\n            from classesSubjects as CS\n            where CS.subjectId = S.id) > 0\n        group by id\n        order by S.modified_at desc\n        limit ${cardNumbers - workshops.length}\n        `,\n        [loggedUserId]\n      )),\n    ];\n  }\n\n  if (workshops.length < cardNumbers) {\n    workshopsIds = createIdList(workshops);\n    workshops = [\n      ...workshops,\n      ...(await select(\n        `\n        select\n          S.id,\n          S.name,\n          S.color,\n          S.description,\n          (select count(*) as count\n            from classesSubjects as CS\n            where CS.subjectId = S.id) as classQuantity\n        from subjects as S\n        where\n          S.classTypeId = 2 ${workshopsIds.length > 0 ? `AND S.id not in (${workshopsIds.join()})` : \"\"}\n          AND (select count(*) as count\n            from classesSubjects as CS\n            where CS.subjectId = S.id) > 0\n        order by S.modified_at desc\n        `,\n        [loggedUserId]\n      )),\n    ];\n  }\n\n  const subjects = await select(\n    `\n    select\n      S.id,\n      S.name,\n      S.color,\n      S.description,\n      (select count(*) as count\n        from classesSubjects as CS\n        where CS.subjectId = S.id) as classQuantity\n    from subjects as S\n    join subjectsGrades as SG on SG.subjectId = S.id\n    join students as ST on ST.gradeId = SG.gradeId\n    where\n      ST.userId = ?\n      AND (select count(*) as count\n        from classesSubjects as CS\n        where CS.subjectId = S.id) > 0\n    order by S.modified_at desc\n    `,\n    [loggedUserId]\n  );\n\n  let otherThemes = await select(\n    `\n    select\n      CT.id,\n      CT.name,\n      CT.description,\n      (select count(*) as count\n        from subjects as S\n        join classesSubjects as CS on CS.subjectId = S.id\n        where classTypeId = CT.id) as classQuantity\n    from userClasses as UC\n    join classTypes as CT on CT.id = UC.classTypeId\n    where\n      userId = ?\n      AND classTypeId > 2\n      AND (select count(*) as count\n        from subjects as S\n        join classesSubjects as CS on CS.subjectId = S.id\n        where classTypeId = CT.id) > 0\n    order by CT.modified_at desc\n    `,\n    [loggedUserId]\n  );\n\n  if (otherThemes.length < cardNumbers) {\n    const otherThemesIds = createIdList(otherThemes);\n\n    otherThemes = [\n      ...otherThemes,\n      ...(await select(\n        `\n        select\n          CT.id,\n          CT.name,\n          CT.description,\n          (select count(*) as count\n            from subjects as S\n            join classesSubjects as CS on CS.subjectId = S.id\n            where classTypeId = CT.id) as classQuantity\n        from userClasses as UC\n        join classTypes as CT on CT.id = UC.classTypeId\n        where\n          classTypeId > 2 ${otherThemesIds.length > 0 ? `AND CT.id not in (${otherThemesIds.join()})` : \"\"}\n          AND (select count(*) as count\n            from subjects as S\n            join classesSubjects as CS on CS.subjectId = S.id\n            where classTypeId = CT.id) > 0\n        order by CT.modified_at desc\n        `,\n        [loggedUserId]\n      )),\n    ];\n  }\n\n  return { workshops, subjects, otherThemes };\n};\n"],"file":"list-carousels.js"}