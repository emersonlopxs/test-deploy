{"version":3,"sources":["../../../src/models/mentors/list.js"],"names":["list","query","limit","offset","sql","sqlTotal","params","sqls","select","from","Number","rows","count","total","Promise","all"],"mappings":";;;;;;;;;AACA;;AACA;;AAEO,MAAMA,IAAI,GAAG,OAAO;AAAEC,EAAAA,KAAF;AAASC,EAAAA,KAAK,GAAG,EAAjB;AAAqBC,EAAAA,MAAM,GAAG;AAA9B,CAAP,KAA6C;AAC/D,MAAIC,GAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,MAAJ;;AAEA,MAAIL,KAAJ,EAAW;AACTG,IAAAA,GAAG,GAAI;AACX,QAAQG,IAAI,CAACC,MAAO;AACpB,QAAQD,IAAI,CAACE,IAAK;AAClB;AACA;AACA;AACA,KANI;AAQAJ,IAAAA,QAAQ,GAAI;AAChB;AACA,QAAQE,IAAI,CAACE,IAAK;AAClB;AACA,KAJI;AAMAH,IAAAA,MAAM,GAAG,CAAC,oBAAKL,KAAL,CAAD,EAAcS,MAAM,CAACR,KAAD,CAApB,EAA6BQ,MAAM,CAACP,MAAD,CAAnC,CAAT;AACD,GAhBD,MAgBO;AACLC,IAAAA,GAAG,GAAI;AACX,QAAQG,IAAI,CAACC,MAAO;AACpB,QAAQD,IAAI,CAACE,IAAK;AAClB;AACA;AACA;AACA,KANI;AAQAH,IAAAA,MAAM,GAAG,CAACI,MAAM,CAACR,KAAD,CAAP,EAAgBQ,MAAM,CAACP,MAAD,CAAtB,CAAT;AAEAE,IAAAA,QAAQ,GAAI;AAChB;AACA,QAAQE,IAAI,CAACE,IAAK;AAClB;AACA,KAJI;AAKD;;AAED,QAAM,CAACE,IAAD,EAAO;AAAEC,IAAAA,KAAK,EAAEC;AAAT,GAAP,IAA2B,MAAMC,OAAO,CAACC,GAAR,CAAY,CAAC,sBAAOX,GAAP,EAAYE,MAAZ,CAAD,EAAsB,qBAAMD,QAAN,EAAgBC,MAAhB,CAAtB,CAAZ,CAAvC;AAEA,SAAO;AAAEL,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,MAAhB;AAAwBU,IAAAA,KAAxB;AAA+BF,IAAAA;AAA/B,GAAP;AACD,CA1CM","sourcesContent":["\nimport { first, select, like } from \"~/core/database\";\nimport * as sqls from \"./sqls\";\n\nexport const list = async ({ query, limit = 10, offset = 0 }) => {\n  let sql;\n  let sqlTotal;\n  let params;\n\n  if (query) {\n    sql = `\n      ${sqls.select}\n      ${sqls.from}\n      where name like ?\n      order by name\n      limit ? offset ?\n    `;\n\n    sqlTotal = `\n      select count(*) as count\n      ${sqls.from}\n      where name like ?\n    `;\n\n    params = [like(query), Number(limit), Number(offset)];\n  } else {\n    sql = `\n      ${sqls.select}\n      ${sqls.from}\n      where 1 = 1\n      order by name\n      limit ? offset ?\n    `;\n\n    params = [Number(limit), Number(offset)];\n\n    sqlTotal = `\n      select count(*) as count\n      ${sqls.from}\n      where 1 = 1\n    `;\n  }\n\n  const [rows, { count: total }] = await Promise.all([select(sql, params), first(sqlTotal, params)]);\n\n  return { query, limit, offset, total, rows };\n};\n"],"file":"list.js"}