{"version":3,"sources":["../../../src/models/accesses/list.js"],"names":["list","query","limit","offset","sql","sqlTotal","params","selectSQL","fromSQL","Number","rows","count","total","Promise","all"],"mappings":";;;;;;;AAAA;;AAEO,MAAMA,IAAI,GAAG,OAAO;AAAEC,EAAAA,KAAF;AAASC,EAAAA,KAAK,GAAG,EAAjB;AAAqBC,EAAAA,MAAM,GAAG;AAA9B,CAAP,KAA6C;AAC/D,MAAIC,GAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,MAAJ;AAEA,QAAMC,SAAS,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GARE;AAUA,QAAMC,OAAO,GAAI;AACnB;AACA,GAFE;;AAIA,MAAIP,KAAJ,EAAW;AACTG,IAAAA,GAAG,GAAI;AACX,QAAQG,SAAU;AAClB,QAAQC,OAAQ;AAChB;AACA;AACA;AACA,KANI;AAQAH,IAAAA,QAAQ,GAAI;AAChB;AACA,QAAQG,OAAQ;AAChB;AACA,KAJI;AAMAF,IAAAA,MAAM,GAAG,CAAC,oBAAKL,KAAL,CAAD,EAAcQ,MAAM,CAACP,KAAD,CAApB,EAA6BO,MAAM,CAACN,MAAD,CAAnC,CAAT;AACD,GAhBD,MAgBO;AACLC,IAAAA,GAAG,GAAI;AACX,QAAQG,SAAU;AAClB,QAAQC,OAAQ;AAChB;AACA;AACA,KALI;AAOAF,IAAAA,MAAM,GAAG,CAACG,MAAM,CAACP,KAAD,CAAP,EAAgBO,MAAM,CAACN,MAAD,CAAtB,CAAT;AAEAE,IAAAA,QAAQ,GAAI;AAChB;AACA,QAAQG,OAAQ;AAChB,KAHI;AAID;;AAED,QAAM,CAACE,IAAD,EAAO;AAAEC,IAAAA,KAAK,EAAEC;AAAT,GAAP,IAA2B,MAAMC,OAAO,CAACC,GAAR,CAAY,CAAC,sBAAOV,GAAP,EAAYE,MAAZ,CAAD,EAAsB,qBAAMD,QAAN,EAAgBC,MAAhB,CAAtB,CAAZ,CAAvC;AACA,SAAO;AAAEL,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,MAAhB;AAAwBS,IAAAA,KAAxB;AAA+BF,IAAAA;AAA/B,GAAP;AACD,CArDM","sourcesContent":["import { first, select, like } from \"~/core/database\";\n\nexport const list = async ({ query, limit = 10, offset = 0 }) => {\n  let sql;\n  let sqlTotal;\n  let params;\n\n  const selectSQL = `\n    select\n      userId\n      , userName\n      , roleName\n      , screenName\n      , env\n      , hitted\n  `;\n\n  const fromSQL = `\n    from accesses\n  `;\n\n  if (query) {\n    sql = `\n      ${selectSQL}\n      ${fromSQL}\n      where userName like ?\n      order by id\n      limit ? offset ?\n    `;\n\n    sqlTotal = `\n      select count(*) as count\n      ${fromSQL}\n      where userName like ?\n    `;\n\n    params = [like(query), Number(limit), Number(offset)];\n  } else {\n    sql = `\n      ${selectSQL}\n      ${fromSQL}\n      order by id\n      limit ? offset ?\n    `;\n\n    params = [Number(limit), Number(offset)];\n\n    sqlTotal = `\n      select count(*) as count\n      ${fromSQL}\n    `;\n  }\n\n  const [rows, { count: total }] = await Promise.all([select(sql, params), first(sqlTotal, params)]);\n  return { query, limit, offset, total, rows };\n};\n"],"file":"list.js"}