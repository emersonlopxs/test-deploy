{"version":3,"sources":["../../../src/models/teachers/list.js"],"names":["list","query","limit","offset","sql","sqlTotal","sqls","select","from","rows","count","total","Promise","all","map","userId","index","subjects"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEO,MAAMA,IAAI,GAAG,OAAO;AAAEC,EAAAA,KAAF;AAASC,EAAAA,KAAK,GAAG,EAAjB;AAAqBC,EAAAA,MAAM,GAAG;AAA9B,CAAP,KAA6C;AAC/D,MAAIC,GAAJ;AACA,MAAIC,QAAJ;;AAEA,MAAIJ,KAAJ,EAAW;AACTG,IAAAA,GAAG,GAAI;AACX,QAAQE,IAAI,CAACC,MAAO;AACpB,QAAQD,IAAI,CAACE,IAAK;AAClB,wBAAwB,oBAAKP,KAAL,CAAY;AACpC;AACA;AACA,KANI;AAQAI,IAAAA,QAAQ,GAAI;AAChB;AACA,QAAQC,IAAI,CAACE,IAAK;AAClB;AACA,KAJI;AAKD,GAdD,MAcO;AACLJ,IAAAA,GAAG,GAAI;AACX,QAAQE,IAAI,CAACC,MAAO;AACpB,QAAQD,IAAI,CAACE,IAAK;AAClB;AACA;AACA;AACA,KANI;AAQAH,IAAAA,QAAQ,GAAI;AAChB;AACA,QAAQC,IAAI,CAACE,IAAK;AAClB;AACA,KAJI;AAKD;;AAED,QAAMC,IAAI,GAAG,MAAM,sBAAOL,GAAP,EAAY,CAACF,KAAD,EAAQC,MAAR,CAAZ,CAAnB;AAEA,QAAM,CAAC;AAAEO,IAAAA,KAAK,EAAEC;AAAT,GAAD,IAAqB,MAAMC,OAAO,CAACC,GAAR,CAAY,CAC3C,qBAAMR,QAAN,EAAgB,CAACH,KAAD,EAAQC,MAAR,CAAhB,CAD2C,EAE3C,GAAGM,IAAI,CAACK,GAAL,CAAS,OAAO;AAAEC,IAAAA;AAAF,GAAP,EAAmBC,KAAnB,KAA6B;AACvCP,IAAAA,IAAI,CAACO,KAAD,CAAJ,CAAYC,QAAZ,GAAuB,MAAM,sBAAOX,IAAI,CAACW,QAAZ,EAAsB,CAACF,MAAD,CAAtB,CAA7B;AACD,GAFE,CAFwC,CAAZ,CAAjC;AAOA,SAAO;AAAEd,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,MAAhB;AAAwBQ,IAAAA,KAAxB;AAA+BF,IAAAA;AAA/B,GAAP;AACD,CA5CM","sourcesContent":["import { first, select, like } from \"~/core/database\";\nimport * as sqls from \"./sqls\";\n\nexport const list = async ({ query, limit = 10, offset = 0 }) => {\n  let sql;\n  let sqlTotal;\n\n  if (query) {\n    sql = `\n      ${sqls.select}\n      ${sqls.from}\n      where name like ${like(query)}\n      order by name\n      limit ? offset ?\n    `;\n\n    sqlTotal = `\n      select count(*) as count\n      ${sqls.from}\n      where name like ?\n    `;\n  } else {\n    sql = `\n      ${sqls.select}\n      ${sqls.from}\n      where 1 = 1\n      order by name\n      limit ? offset ?\n    `;\n\n    sqlTotal = `\n      select count(*) as count\n      ${sqls.from}\n      where 1 = 1\n    `;\n  }\n\n  const rows = await select(sql, [limit, offset]);\n\n  const [{ count: total }] = await Promise.all([\n    first(sqlTotal, [limit, offset]),\n    ...rows.map(async ({ userId }, index) => {\n      rows[index].subjects = await select(sqls.subjects, [userId]);\n    }),\n  ]);\n\n  return { query, limit, offset, total, rows };\n};\n"],"file":"list.js"}