{"version":3,"sources":["../../../src/models/students/insert.js"],"names":["insert","city","cpf","email","password","name","state","gradeId","isPublicSchool","schoolName","siteId","birthDate","gender","classTypes","subjects","token","trans","userId","helpers","hash","DEFAULT_PASSWORD","Promise","all","map","classTypeId","subjectId"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEO,MAAMA,MAAM,GAAG,OAAO;AAC3BC,EAAAA,IAD2B;AAE3BC,EAAAA,GAF2B;AAG3BC,EAAAA,KAH2B;AAI3BC,EAAAA,QAJ2B;AAK3BC,EAAAA,IAL2B;AAM3BC,EAAAA,KAN2B;AAO3BC,EAAAA,OAP2B;AAQ3BC,EAAAA,cAR2B;AAS3BC,EAAAA,UAT2B;AAU3BC,EAAAA,MAV2B;AAW3BC,EAAAA,SAX2B;AAY3BC,EAAAA,MAZ2B;AAa3BC,EAAAA,UAb2B;AAc3BC,EAAAA,QAd2B;AAe3BC,EAAAA;AAf2B,CAAP,KAiBpB,gCAAiB,MAAMC,KAAN,IAAe;AAC9B,QAAMC,MAAM,GAAG,MAAMD,KAAK,CAAChB,MAAN,CAClB;AACP;AACA;AACA,OAJyB,EAKnB,CAACG,KAAD,EAAQ,MAAMe,OAAO,CAACd,QAAR,CAAiBe,IAAjB,CAAsBf,QAAQ,IAAIgB,wBAAlC,CAAd,EAAmEL,KAAnE,CALmB,CAArB;AAQA,QAAMC,KAAK,CAAChB,MAAN,CACH;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SA/BU,EAgCJ,CAACiB,MAAD,EAASV,OAAT,EAAkBC,cAAlB,EAAkCC,UAAlC,EAA8CH,KAA9C,EAAqDL,IAArD,EAA2DI,IAA3D,EAAiEH,GAAjE,EAAsEQ,MAAtE,EAA8EC,SAA9E,EAAyFC,MAAzF,CAhCI,CAAN;AAmCA,QAAMS,OAAO,CAACC,GAAR,CAAY,CAChBN,KAAK,CAAChB,MAAN,CACG;AACT;AACA;AACA,SAJM,EAKE,CAAC,SAAD,EAAYiB,MAAZ,CALF,CADgB,EAQhB,GAAGJ,UAAU,CAACU,GAAX,CAAe,OAAMC,WAAN,KAChBR,KAAK,CAAChB,MAAN,CACG;AACX;AACA;AACA,WAJQ,EAKE,CAACiB,MAAD,EAASO,WAAT,CALF,CADC,CARa,EAiBhB,GAAGV,QAAQ,CAACS,GAAT,CAAa,OAAME,SAAN,KACdT,KAAK,CAAChB,MAAN,CACG;AACX;AACA;AACA,WAJQ,EAKE,CAACiB,MAAD,EAASQ,SAAT,CALF,CADC,CAjBa,CAAZ,CAAN;AA2BD,CAvED,CAjBK","sourcesContent":["import { beginTransaction } from \"~/core/database\";\nimport { DEFAULT_PASSWORD } from \"~/core/config\";\nimport * as helpers from \"~/helpers\";\n\nexport const insert = async ({\n  city,\n  cpf,\n  email,\n  password,\n  name,\n  state,\n  gradeId,\n  isPublicSchool,\n  schoolName,\n  siteId,\n  birthDate,\n  gender,\n  classTypes,\n  subjects,\n  token,\n}) =>\n  beginTransaction(async trans => {\n    const userId = await trans.insert(\n      `\n        insert into users(username, password, token, createdAt, modifiedAt)\n        values(?, ?, ?, now(), now())\n      `,\n      [email, await helpers.password.hash(password || DEFAULT_PASSWORD), token]\n    );\n\n    await trans.insert(\n      `\n          insert into students(\n            userId\n            , gradeId\n            , isPublicSchool\n            , schoolName\n            , state\n            , city\n            , name\n            , cpf\n            , siteId\n            , birthDate\n            , gender\n            , createdAt\n            , modifiedAt\n          ) values(\n            ?\n            , ?\n            , ?\n            , ?\n            , ?\n            , ?\n            , ?\n            , ?\n            , ?\n            , ?\n            , ?\n            , now()\n            , now()\n          )\n        `,\n      [userId, gradeId, isPublicSchool, schoolName, state, city, name, cpf, siteId, birthDate, gender]\n    );\n\n    await Promise.all([\n      trans.insert(\n        `\n          insert into usersRoles(roleId, userId, createdAt, modifiedAt)\n          values((select id from roles where alias = ?), ?, now(), now())\n        `,\n        [\"student\", userId]\n      ),\n      ...classTypes.map(async classTypeId =>\n        trans.insert(\n          `\n            insert into userClasses (userId, classTypeId, createdAt, modifiedAt)\n            values (?, ?, now(), now())\n          `,\n          [userId, classTypeId]\n        )\n      ),\n      ...subjects.map(async subjectId =>\n        trans.insert(\n          `\n            insert into userClasses (userId, subjectId, createdAt, modifiedAt)\n            values (?, ?, now(), now())\n          `,\n          [userId, subjectId]\n        )\n      ),\n    ]);\n  });\n"],"file":"insert.js"}