{"version":3,"sources":["../../src/helpers/password.js"],"names":["hash","password","bcrypt","Number","BCRYPT_ROUNDS","verify","hashed","isValid","compare","UnauthorizedError"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACO,MAAMA,IAAI,GAAGC,QAAQ,IAAIC,gBAAOF,IAAP,CAAYC,QAAZ,EAAsBE,MAAM,CAACC,yBAAiB,EAAlB,CAA5B,CAAzB;AAEP;AACA;AACA;AACA;AACA;;;;;AACO,MAAMC,MAAM,GAAG,OAAOJ,QAAP,EAAiBK,MAAjB,KAA4B;AAChD,QAAMC,OAAO,GAAG,MAAML,gBAAOM,OAAP,CAAeP,QAAf,EAAyBK,MAAzB,CAAtB;AACA,MAAI,CAACC,OAAL,EAAc,MAAM,IAAIE,yBAAJ,EAAN;AACf,CAHM","sourcesContent":["import bcrypt from \"bcrypt\";\nimport { UnauthorizedError } from \"~/errors\";\nimport { BCRYPT_ROUNDS } from \"~/core/config\";\n\n/**\n * Hash the password in bcrypt\n * @param {string} password\n */\nexport const hash = password => bcrypt.hash(password, Number(BCRYPT_ROUNDS || 10));\n\n/**\n * Check if password is correct, if not throw UnauthorizedError()\n * @param {string} password\n * @param {string} hashed\n */\nexport const verify = async (password, hashed) => {\n  const isValid = await bcrypt.compare(password, hashed);\n  if (!isValid) throw new UnauthorizedError();\n};\n"],"file":"password.js"}