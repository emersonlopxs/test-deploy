{"version":3,"sources":["../../../src/handlers/oauth/test.js"],"names":["jest","mock","describe","username","password","gradeId","name","role","test","done","helpers","hash","then","hashed","users","getCredentialsInfo","mockResolvedValue","id","createdAt","Date","modifiedAt","getRoleInfo","jwt","verify","payload","expect","toBe"],"mappings":";;;;AACA;;AACA;;AACA;;AACA;;AAEAA,IAAI,CAACC,IAAL,CAAU,gBAAV;AAEAC,QAAQ,CAAC,aAAD,EAAgB,MAAM;AAC5B,QAAMC,QAAQ,GAAG,iBAAjB;AACA,QAAMC,QAAQ,GAAG,UAAjB;AACA,QAAMC,OAAO,GAAG,CAAhB;AACA,QAAMC,IAAI,GAAG,YAAb;AACA,QAAMC,IAAI,GAAG,SAAb;AAEAC,EAAAA,IAAI,CAAC,YAAD,EAAeC,IAAI,IAAI;AACzBC,IAAAA,OAAO,CAACN,QAAR,CAAiBO,IAAjB,CAAsBP,QAAtB,EAAgCQ,IAAhC,CAAqCC,MAAM,IAAI;AAC7CC,MAAAA,KAAK,CAACC,kBAAN,CAAyBC,iBAAzB,CAA2C;AACzCC,QAAAA,EAAE,EAAE,CADqC;AAEzCd,QAAAA,QAFyC;AAGzCC,QAAAA,QAAQ,EAAES,MAH+B;AAIzCK,QAAAA,SAAS,EAAE,IAAIC,IAAJ,EAJ8B;AAKzCC,QAAAA,UAAU,EAAE,IAAID,IAAJ,EAL6B;AAMzCZ,QAAAA;AANyC,OAA3C;AASAO,MAAAA,KAAK,CAACO,WAAN,CAAkBL,iBAAlB,CAAoC;AAAEV,QAAAA,IAAF;AAAQD,QAAAA;AAAR,OAApC;AAEA,wBAAM;AAAEF,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAAN,EACGQ,IADH,CACQF,OAAO,CAACY,GAAR,CAAYC,MADpB,EAEGX,IAFH,CAEQY,OAAO,IAAI;AACfC,QAAAA,MAAM,CAACD,OAAO,CAACrB,QAAT,CAAN,CAAyBuB,IAAzB,CAA8BvB,QAA9B;AACAsB,QAAAA,MAAM,CAACD,OAAO,CAACnB,OAAT,CAAN,CAAwBqB,IAAxB,CAA6BrB,OAA7B;AACAoB,QAAAA,MAAM,CAACD,OAAO,CAAClB,IAAT,CAAN,CAAqBoB,IAArB,CAA0BpB,IAA1B;AACAmB,QAAAA,MAAM,CAACD,OAAO,CAACrB,QAAT,CAAN,CAAyBuB,IAAzB,CAA8BvB,QAA9B;AACAsB,QAAAA,MAAM,CAACD,OAAO,CAACjB,IAAT,CAAN,CAAqBmB,IAArB,CAA0BnB,IAA1B;AACAE,QAAAA,IAAI;AACL,OATH;AAUD,KAtBD;AAuBD,GAxBG,CAAJ;AAyBD,CAhCO,CAAR","sourcesContent":["\nimport \"dotenv/config\";\nimport { login } from \"./login\";\nimport * as users from \"~/models/users\";\nimport * as helpers from \"~/helpers\";\n\njest.mock(\"~/models/users\");\n\ndescribe(\"OAuth tests\", () => {\n  const username = \"bob@contoso.com\";\n  const password = \"12345678\";\n  const gradeId = 1;\n  const name = \"Bob Robert\";\n  const role = \"student\";\n\n  test(\"Login test\", done => {\n    helpers.password.hash(password).then(hashed => {\n      users.getCredentialsInfo.mockResolvedValue({\n        id: 1,\n        username,\n        password: hashed,\n        createdAt: new Date(),\n        modifiedAt: new Date(),\n        role,\n      });\n\n      users.getRoleInfo.mockResolvedValue({ name, gradeId });\n\n      login({ username, password })\n        .then(helpers.jwt.verify)\n        .then(payload => {\n          expect(payload.username).toBe(username);\n          expect(payload.gradeId).toBe(gradeId);\n          expect(payload.name).toBe(name);\n          expect(payload.username).toBe(username);\n          expect(payload.role).toBe(role);\n          done();\n        });\n    });\n  });\n});\n"],"file":"test.js"}