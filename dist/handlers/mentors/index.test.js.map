{"version":3,"sources":["../../../src/handlers/mentors/index.test.js"],"names":["jest","mock","describe","bob","name","alice","trudy","table","models","mentors","get","mockImplementation","params","query","limit","offset","filter","item","includes","slice","list","insert","row","userId","length","createdAt","Date","modifiedAt","push","update","index","findIndex","Error","remove","splice","it","email","password","handler","first","second","thrid","expect","toBe"],"mappings":"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","sourcesContent":["\nimport \"dotenv/config\";\nimport * as handler from \"./index\";\nimport * as models from \"~/models\";\n\njest.mock(\"~/models/mentors\");\n\ndescribe(\"Mentors tests\", () => {\n  const bob = {\n    name: \"BOB ROBSON\",\n  };\n\n  const alice = {\n    name: \"ALICE WATSON\",\n  };\n\n  const trudy = {\n    name: \"TRUDY NEWMAN\",\n  };\n\n  const table = [];\n\n  models.mentors.get.mockImplementation(async params => {\n    const { query, limit, offset } = params;\n\n    return table.filter(item => item.name.includes(query)).slice(offset, limit + offset);\n  });\n\n  models.mentors.list.mockImplementation(async params => {\n    const { query, limit = 10, offset = 0 } = params;\n\n    if (query) return table.filter(item => item.name.includes(query)).slice(offset, limit + offset);\n    return table.slice(offset, limit + offset);\n  });\n\n  models.mentors.insert.mockImplementation(async row => {\n    const userId = table.length + 1;\n    const createdAt = new Date();\n    const modifiedAt = new Date();\n    table.push({ ...row, userId, createdAt, modifiedAt });\n    return userId;\n  });\n\n  models.mentors.update.mockImplementation(async row => {\n    const { userId } = row;\n    const modifiedAt = new Date();\n\n    // I want to keep the order of the array\n    const index = table.findIndex(item => item.userId === userId);\n    if (index < 0) throw new Error(`Item with userId ${userId} not found on the table`);\n\n    table[index] = { ...table[index], ...row, modifiedAt };\n  });\n\n  models.mentors.remove.mockImplementation(async row => {\n    const { userId } = row;\n\n    // I want to keep the order of the array\n    const index = table.findIndex(item => item.userId === userId);\n    if (index < 0) throw new Error(`Item with userId ${userId} not found on the table`);\n\n    table.splice(index, 1);\n  });\n\n  it(\"Insert\", async () => {\n    const email = \"teste@email.com\";\n    const password = \"1234abcd\";\n    bob.userId = await handler.insert({ email, password, ...bob });\n    alice.userId = await handler.insert({ email, password, ...alice });\n    trudy.userId = await handler.insert({ email, password, ...trudy });\n\n    const [first, second, thrid] = table;\n\n    expect(first.name).toBe(bob.name);\n    expect(second.name).toBe(alice.name);\n    expect(thrid.name).toBe(trudy.name);\n  });\n\n  it(\"Update Bob\", async () => {\n    bob.name += \" - UPDATED\";\n    alice.name += \" - UPDATED\";\n    trudy.name += \" - UPDATED\";\n\n    await handler.update({ ...bob });\n    await handler.update({ ...alice });\n    await handler.update({ ...trudy });\n\n    const [first, second, thrid] = table;\n\n    expect(first.name).toBe(bob.name);\n    expect(second.name).toBe(alice.name);\n    expect(thrid.name).toBe(trudy.name);\n  });\n\n  it(\"List test: limit 1 offset 0\", async () => {\n    const [first] = await handler.list({ limit: 1 });\n\n    expect(first.name).toBe(bob.name);\n  });\n\n  it(\"List test: limit 2 offset 0\", async () => {\n    const [first, second] = await handler.list({ limit: 2 });\n\n    expect(first.name).toBe(bob.name);\n    expect(second.name).toBe(alice.name);\n  });\n\n  it(\"List test: limit 1 offset 2\", async () => {\n    const [thrid] = await handler.list({ limit: 1, offset: 2 });\n\n    expect(thrid.name).toBe(trudy.name);\n  });\n\n  it(\"Removing exists\", async () => {\n    await handler.remove({ userId: bob.userId });\n    expect(table.length).toBe(2);\n\n    await handler.remove({ userId: alice.userId });\n    expect(table.length).toBe(1);\n\n    await handler.remove({ userId: trudy.userId });\n    expect(table.length).toBe(0);\n  });\n});\n"],"file":"index.test.js"}