{"version":3,"sources":["../../../src/handlers/grades/index.test.js"],"names":["jest","mock","describe","exemplo1","name","exemplo2","exemplo3","table","models","grades","get","mockImplementation","params","query","limit","offset","filter","item","includes","slice","list","insert","row","id","length","userId","createdAt","Date","modifiedAt","push","update","index","findIndex","Error","remove","splice","it","handler","first","second","thrid","expect","toBe"],"mappings":"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","sourcesContent":["\nimport \"dotenv/config\";\nimport * as handler from \"./index\";\nimport * as models from \"~/models\";\n\njest.mock(\"~/models/grades\");\n\ndescribe(\"Mentors tests\", () => {\n  const exemplo1 = {\n    name: \"1º Ano Médio\",\n  };\n\n  const exemplo2 = {\n    name: \"3º Ano Médio\",\n  };\n\n  const exemplo3 = {\n    name: \"9º Ano Fundamental\",\n  };\n\n  const table = [];\n\n  models.grades.get.mockImplementation(async params => {\n    const { query, limit, offset } = params;\n\n    return table.filter(item => item.name.includes(query)).slice(offset, limit + offset);\n  });\n\n  models.grades.list.mockImplementation(async params => {\n    const { query, limit = 10, offset = 0 } = params;\n\n    if (query) return table.filter(item => item.name.includes(query)).slice(offset, limit + offset);\n    return table.slice(offset, limit + offset);\n  });\n\n  models.grades.insert.mockImplementation(async row => {\n    const id = table.length + 1;\n    const userId = id * 10;\n    const createdAt = new Date();\n    const modifiedAt = new Date();\n    table.push({ ...row, id, userId, createdAt, modifiedAt });\n    return id;\n  });\n\n  models.grades.update.mockImplementation(async row => {\n    const { id } = row;\n    const modifiedAt = new Date();\n\n    // I want to keep the order of the array\n    const index = table.findIndex(item => item.id === id);\n    if (index < 0) throw new Error(`Item with Id ${id} not found on the table`);\n\n    table[index] = { ...table[index], ...row, modifiedAt };\n  });\n\n  models.grades.remove.mockImplementation(async row => {\n    const { id } = row;\n\n    // I want to keep the order of the array\n    const index = table.findIndex(item => item.id === id);\n    if (index < 0) throw new Error(`Item with Id ${id} not found on the table`);\n\n    table.splice(index, 1);\n  });\n\n  it(\"Insert\", async () => {\n    exemplo1.id = await handler.insert(exemplo1);\n    exemplo2.id = await handler.insert(exemplo2);\n    exemplo3.id = await handler.insert(exemplo3);\n\n    const [first, second, thrid] = table;\n\n    expect(first.name).toBe(exemplo1.name);\n    expect(second.name).toBe(exemplo2.name);\n    expect(thrid.name).toBe(exemplo3.name);\n  });\n\n  it(\"Update exemplos\", async () => {\n    await handler.update({ ...exemplo1 });\n    await handler.update({ ...exemplo2 });\n    await handler.update({ ...exemplo3 });\n\n    const [first, second, thrid] = table;\n\n    expect(first.name).toBe(exemplo1.name);\n    expect(second.name).toBe(exemplo2.name);\n    expect(thrid.name).toBe(exemplo3.name);\n  });\n\n  it(\"List test: limit 1 offset 0\", async () => {\n    const [first] = await handler.list({ limit: 1 });\n\n    expect(first.name).toBe(exemplo1.name);\n  });\n\n  it(\"List test: limit 2 offset 0\", async () => {\n    const [first, second] = await handler.list({ limit: 2 });\n\n    expect(first.name).toBe(exemplo1.name);\n    expect(second.name).toBe(exemplo2.name);\n  });\n\n  it(\"List test: limit 1 offset 2\", async () => {\n    const [thrid] = await handler.list({ limit: 1, offset: 2 });\n\n    expect(thrid.name).toBe(exemplo3.name);\n  });\n\n  it(\"Removing exists\", async () => {\n    await handler.remove({ id: exemplo1.id });\n    expect(table.length).toBe(2);\n\n    await handler.remove({ id: exemplo2.id });\n    expect(table.length).toBe(1);\n\n    await handler.remove({ id: exemplo3.id });\n    expect(table.length).toBe(0);\n  });\n});\n"],"file":"index.test.js"}